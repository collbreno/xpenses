// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entities/expense_entity.dart';
import 'entities/installment_entity.dart';
import 'entities/person_entity.dart';
import 'entities/tag_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5385091276152244694),
      name: 'Tag',
      lastPropertyId: const obx_int.IdUid(4, 7767785884469948146),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1808312684272764500),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5111682822967867776),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2957705462550479313),
            name: 'colorCode',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7767785884469948146),
            name: 'iconName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7081710124624419521),
      name: 'Expense',
      lastPropertyId: const obx_int.IdUid(6, 3040798310198782570),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7897364243912476803),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8694477417806647715),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4195130867879873794),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3314000802935978846),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3040798310198782570),
            name: 'nInstallments',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 8224907355454183699),
            name: 'tags',
            targetId: const obx_int.IdUid(1, 5385091276152244694))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'installments', srcEntity: 'Installment', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 6943544761726223600),
      name: 'Installment',
      lastPropertyId: const obx_int.IdUid(5, 7310451178321691996),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9054379990651474412),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2268632493398209113),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5232273270820766541),
            name: 'number',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7549757036359490328),
            name: 'expenseId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 3302294204462420639),
            relationTarget: 'Expense'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7310451178321691996),
            name: 'cents',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'people', srcEntity: 'PersonPart', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 5857516726486378341),
      name: 'PersonPart',
      lastPropertyId: const obx_int.IdUid(5, 1421927444835419544),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4769889821767834903),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1053791953934998572),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4866717618700206492),
            name: 'isPaid',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7560266596962456323),
            name: 'installmentId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 2998203910247442634),
            relationTarget: 'Installment'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1421927444835419544),
            name: 'cents',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 5857516726486378341),
      lastIndexId: const obx_int.IdUid(2, 2998203910247442634),
      lastRelationId: const obx_int.IdUid(3, 6386938969032651265),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [4919072298255371102],
      retiredRelationUids: const [1010446096478926488, 6386938969032651265],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Tag: obx_int.EntityDefinition<Tag>(
        model: _entities[0],
        toOneRelations: (Tag object) => [],
        toManyRelations: (Tag object) => {},
        getId: (Tag object) => object.id,
        setId: (Tag object, int id) {
          object.id = id;
        },
        objectToFB: (Tag object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final iconNameOffset = object.iconName == null
              ? null
              : fbb.writeString(object.iconName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.colorCode);
          fbb.addOffset(3, iconNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final iconNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Tag(name: nameParam, iconName: iconNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..colorCode =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);

          return object;
        }),
    Expense: obx_int.EntityDefinition<Expense>(
        model: _entities[1],
        toOneRelations: (Expense object) => [],
        toManyRelations: (Expense object) => {
              obx_int.RelInfo<Expense>.toMany(1, object.id): object.tags,
              obx_int.RelInfo<Installment>.toOneBacklink(4, object.id,
                      (Installment srcObject) => srcObject.expense):
                  object.installments
            },
        getId: (Expense object) => object.id,
        setId: (Expense object, int id) {
          object.id = id;
        },
        objectToFB: (Expense object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addOffset(4, titleOffset);
          fbb.addInt64(5, object.nInstallments);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = Expense(
              title: titleParam, description: descriptionParam, date: dateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..nInstallments =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          obx_int.InternalToManyAccess.setRelInfo<Expense>(object.tags, store,
              obx_int.RelInfo<Expense>.toMany(1, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Expense>(
              object.installments,
              store,
              obx_int.RelInfo<Installment>.toOneBacklink(
                  4, object.id, (Installment srcObject) => srcObject.expense));
          return object;
        }),
    Installment: obx_int.EntityDefinition<Installment>(
        model: _entities[2],
        toOneRelations: (Installment object) => [object.expense],
        toManyRelations: (Installment object) => {
              obx_int.RelInfo<PersonPart>.toOneBacklink(4, object.id,
                      (PersonPart srcObject) => srcObject.installment):
                  object.people
            },
        getId: (Installment object) => object.id,
        setId: (Installment object, int id) {
          object.id = id;
        },
        objectToFB: (Installment object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addInt64(2, object.number);
          fbb.addInt64(3, object.expense.targetId);
          fbb.addInt64(4, object.cents);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final numberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = Installment(date: dateParam, number: numberParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..cents =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.expense.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.expense.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Installment>(
              object.people,
              store,
              obx_int.RelInfo<PersonPart>.toOneBacklink(4, object.id,
                  (PersonPart srcObject) => srcObject.installment));
          return object;
        }),
    PersonPart: obx_int.EntityDefinition<PersonPart>(
        model: _entities[3],
        toOneRelations: (PersonPart object) => [object.installment],
        toManyRelations: (PersonPart object) => {},
        getId: (PersonPart object) => object.id,
        setId: (PersonPart object, int id) {
          object.id = id;
        },
        objectToFB: (PersonPart object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.isPaid);
          fbb.addInt64(3, object.installment.targetId);
          fbb.addInt64(4, object.cents);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isPaidParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final object = PersonPart(name: nameParam, isPaid: isPaidParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..cents =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.installment.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.installment.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Tag] entity fields to define ObjectBox queries.
class Tag_ {
  /// See [Tag.id].
  static final id = obx.QueryIntegerProperty<Tag>(_entities[0].properties[0]);

  /// See [Tag.name].
  static final name = obx.QueryStringProperty<Tag>(_entities[0].properties[1]);

  /// See [Tag.colorCode].
  static final colorCode =
      obx.QueryIntegerProperty<Tag>(_entities[0].properties[2]);

  /// See [Tag.iconName].
  static final iconName =
      obx.QueryStringProperty<Tag>(_entities[0].properties[3]);
}

/// [Expense] entity fields to define ObjectBox queries.
class Expense_ {
  /// See [Expense.id].
  static final id =
      obx.QueryIntegerProperty<Expense>(_entities[1].properties[0]);

  /// See [Expense.description].
  static final description =
      obx.QueryStringProperty<Expense>(_entities[1].properties[1]);

  /// See [Expense.date].
  static final date =
      obx.QueryDateProperty<Expense>(_entities[1].properties[2]);

  /// See [Expense.title].
  static final title =
      obx.QueryStringProperty<Expense>(_entities[1].properties[3]);

  /// See [Expense.nInstallments].
  static final nInstallments =
      obx.QueryIntegerProperty<Expense>(_entities[1].properties[4]);

  /// see [Expense.tags]
  static final tags =
      obx.QueryRelationToMany<Expense, Tag>(_entities[1].relations[0]);

  /// see [Expense.installments]
  static final installments =
      obx.QueryBacklinkToMany<Installment, Expense>(Installment_.expense);
}

/// [Installment] entity fields to define ObjectBox queries.
class Installment_ {
  /// See [Installment.id].
  static final id =
      obx.QueryIntegerProperty<Installment>(_entities[2].properties[0]);

  /// See [Installment.date].
  static final date =
      obx.QueryDateProperty<Installment>(_entities[2].properties[1]);

  /// See [Installment.number].
  static final number =
      obx.QueryIntegerProperty<Installment>(_entities[2].properties[2]);

  /// See [Installment.expense].
  static final expense =
      obx.QueryRelationToOne<Installment, Expense>(_entities[2].properties[3]);

  /// See [Installment.cents].
  static final cents =
      obx.QueryIntegerProperty<Installment>(_entities[2].properties[4]);

  /// see [Installment.people]
  static final people =
      obx.QueryBacklinkToMany<PersonPart, Installment>(PersonPart_.installment);
}

/// [PersonPart] entity fields to define ObjectBox queries.
class PersonPart_ {
  /// See [PersonPart.id].
  static final id =
      obx.QueryIntegerProperty<PersonPart>(_entities[3].properties[0]);

  /// See [PersonPart.name].
  static final name =
      obx.QueryStringProperty<PersonPart>(_entities[3].properties[1]);

  /// See [PersonPart.isPaid].
  static final isPaid =
      obx.QueryBooleanProperty<PersonPart>(_entities[3].properties[2]);

  /// See [PersonPart.installment].
  static final installment = obx.QueryRelationToOne<PersonPart, Installment>(
      _entities[3].properties[3]);

  /// See [PersonPart.cents].
  static final cents =
      obx.QueryIntegerProperty<PersonPart>(_entities[3].properties[4]);
}
